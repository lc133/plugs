#所有用户都可以启动Nginx进程;
#user  nobody;

#Nginx进程最多可以产生的worker process数
#Nginx实现并发的关键,worker process的值越大，可以支持的支持的并发处理量也越多,但实际上它还要受到来自软件本身、操作系统本身资源和能力、硬件设备（如CPU和磁盘驱动器）等的制约
worker_processes  1 | auto;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;


#Nginx进程作为系统的守护进程运行，我们需要在某文件中保存当前运行程序的主进程号
#pid        logs/nginx.pid;


events {
    #设置允许每一个worker process同时开启的最大连接数(不仅仅包括和前端用户建立的连接数，而是包括所有可能的连接数)
    worker_connections  1024;
}


http {
    #将其他的Nginx配置或者第三方模块的配置引用到当前的主配置文件中
    #在常用的浏览器中，可以显示的内容是HMTL、XML、GIF及Flash等种类繁多的文本、媒体等资源，浏览器为区分这些资源，需要使用MIME Type。换言之，MIME Type是网络资源的媒体类型。Nginx服务器作为Web服务器，必须能够识别前端请求的资源类型
    include       mime.types;
    #配置了用了处理前端请求的MIME类型
    default_type  application/octet-stream;

    #定义服务日志的格式，并且可以为格式字符串定一个名字
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #记录Nginx服务器提供服务应答前端请求的日志，我们将其称为服务日志以示区分
    #access_log  logs/access.log  main;

    #开启或者关闭使用sendfile()传输文件
    sendfile        on;
    #tcp_nopush     on;

    #配置连接超时时间
    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    #配置网络监听
    server {
        #端口号，如果只定义了IP地址没有定义端口号，就是用80端口 80 | 8080
        listen       80;
        #虚拟主机配置
        #这里的“主机”，就是指此server块对外提供的虚拟主机。设置了主机的名称并配置好DNS，用户就可以使用这个名称向此虚拟主机发送请求了
        #可以只有一个名称，也可以由多个名称并列，之间用空格隔开。每个名字就是一个域名，由两段或者三段组成，之间由点号“.”隔开
        server_name  localhost;

        #charset koi8-r;

        #记录Nginx服务器提供服务应答前端请求的日志，我们将其称为服务日志以示区分
        #access_log  logs/host.access.log  main;

        location / {
            #Web服务器接收到网络请求之后，首先要在服务器端指定目录中寻找请求资源
            #Nginx服务器接收到请求以后查找资源的根目录路径
            root   html;
            #设置网站的默认首页，它一般可以有两个作用：一是，用户在发出请求访问网站时，请求地址可以不写首页名称。二是，可以对一个请求，根据其请求内容而设置不同的首页
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    将其他的Nginx配置或者第三方模块的配置引用到当前的主配置文件中
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
